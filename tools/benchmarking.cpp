#include <map>
#include <set>
#include <vector>
#include <utility>
#include <time.h>
extern "C"
{
	#include "nausparse.h" // includes nauty.h
	#include "gtools.h"
}
using namespace std;

char* call_sparse_nauty(char* input, int mininvarlevel = 0, int maxinvarlevel = 1, int invararg = 0)
{
  DYNALLSTAT(int, lab, lab_sz);
  DYNALLSTAT(int, ptn, ptn_sz);
  DYNALLSTAT(int, orbits, orbits_sz);
  DYNALLSTAT(int, nmap, nmap_sz);
  static DEFAULTOPTIONS_SPARSEGRAPH(options);
	statsblk stats;
	/* Declare and initialize sparse graph structures */
  SG_DECL(sg);
	SG_DECL(cg);
  int n, m, i;
  options.getcanon = TRUE; // option for canonical labelling
	options.mininvarlevel = mininvarlevel; // best 0, 1, 2
	options.maxinvarlevel = maxinvarlevel; // best 0, 1, 2
	options.invararg = invararg; // 0, 8 for sparse graphs

	set<int> labels;
	vector<pair<int, int>> edges;
	for (i = 0; input[i] != 0; i++)
	{
		if ((input[i] >= '0') && (input[i] <= '9'))
		{
			int a, b, c;
			sscanf(input+i, "%d, %d%n", &a, &b, &c); // same as &input(i)
			edges.emplace_back(a,b);
			labels.insert(a);
			labels.insert(b);
			i += c-1;
		}
	}
	map<int, int> relabel;
	int counter = 0;
	for (int v : labels) relabel[v] = counter++;

	n = counter;
	m = SETWORDSNEEDED(n);
  nauty_check(WORDSIZE,m,n,NAUTYVERSIONID);

  DYNALLOC1(int, lab, lab_sz, n, (char *) "malloc");
  DYNALLOC1(int, ptn, ptn_sz, n, (char *) "malloc");
	DYNALLOC1(int, orbits, orbits_sz, n, (char *) "malloc");
	DYNALLOC1(int, nmap, nmap_sz, n, (char *) "malloc");
	SG_ALLOC(sg, n, 3*n, (char *) "malloc");
	sg.nv = n; // number of vertices
	sg.nde = 3*n; // number of directed edges
 	int* indices = new int[n];
	for (i = 0; i < n; ++i)
	{
		sg.v[i] = 3*i; // position of vertex i in the array of neighbours
    sg.d[i] = 3; // degree of vertex i
		indices[i] = 3*i;
	}

	for (auto &edge : edges) {
		int e = relabel[edge.first];
		int f = relabel[edge.second];
		sg.e[indices[e]] = f;
		indices[e]++;
		sg.e[indices[f]] = e;
		indices[f]++;
	}
	sparsenauty(&sg, lab, ptn, orbits, &options, &stats, &cg);
	return sgtos6(&sg);
}

double benchmark(char* input, int invararg)
{
	clock_t t = clock();
	call_sparse_nauty(input, 0, 1, invararg);
	return ((double) (clock()-t))/((double) CLOCKS_PER_SEC);
}

int main()
{
	// char* input = (char *) "{{99,46}, {143,106}, {13,68}, {99,248}, {167,65}, {198,288}, {189,246}, {210,53}, {138,131}, {266,96}, {46,236}, {36,124}, {83,281}, {60,137}, {180,184}, {118,296}, {6,52}, {9,141}, {147,173}, {226,262}, {300,17}, {281,20}, {125,120}, {134,260}, {81,9}, {13,46}, {101,234}, {264,92}, {117,74}, {198,29}, {93,116}, {211,249}, {278,7}, {77,100}, {233,129}, {177,256}, {116,240}, {248,97}, {90,87}, {132,204}, {11,96}, {207,274}, {45,63}, {224,239}, {34,104}, {6,207}, {297,117}, {198,90}, {112,280}, {203,248}, {14,279}, {22,180}, {133,271}, {299,98}, {291,41}, {293,186}, {36,131}, {126,229}, {133,141}, {111,216}, {15,19}, {49,225}, {179,92}, {49,171}, {297,150}, {48,126}, {67,217}, {275,25}, {205,227}, {29,109}, {264,56}, {276,196}, {187,268}, {132,72}, {58,278}, {115,207}, {95,54}, {190,206}, {244,104}, {102,208}, {151,184}, {170,62}, {74,228}, {26,105}, {12,29}, {176,254}, {220,74}, {277,215}, {110,163}, {27,109}, {234,72}, {51,98}, {57,189}, {93,292}, {36,225}, {55,270}, {259,228}, {200,71}, {1,98}, {257,296}, {35,189}, {258,229}, {121,73}, {37,216}, {91,129}, {277,218}, {204,249}, {265,168}, {299,272}, {154,284}, {145,42}, {24,271}, {178,269}, {44,38}, {209,13}, {106,251}, {188,273}, {200,152}, {50,161}, {133,261}, {246,292}, {7,194}, {89,84}, {190,106}, {83,172}, {253,286}, {252,285}, {287,31}, {209,200}, {287,82}, {1,283}, {121,199}, {160,173}, {174,284}, {4,64}, {191,271}, {227,153}, {143,82}, {100,119}, {56,95}, {66,151}, {56,192}, {88,149}, {155,262}, {201,54}, {222,186}, {183,131}, {82,185}, {187,269}, {3,118}, {122,202}, {247,228}, {134,145}, {79,183}, {25,182}, {50,273}, {122,257}, {210,293}, {110,256}, {135,219}, {95,195}, {70,229}, {57,75}, {188,76}, {85,96}, {69,104}, {22,165}, {154,41}, {223,217}, {47,9}, {249,283}, {275,301}, {169,292}, {107,283}, {221,294}, {61,239}, {60,86}, {102,280}, {232,276}, {23,130}, {224,290}, {78,226}, {162,273}, {88,27}, {91,103}, {126,296}, {199,276}, {231,219}, {40,142}, {203,28}, {33,155}, {247,153}, {279,61}, {169,73}, {178,174}, {130,10}, {11,183}, {124,168}, {213,237}, {146,213}, {193,284}, {211,195}, {158,42}, {216,162}, {111,159}, {2,141}, {16,43}, {244,146}, {165,17}, {138,97}, {181,150}, {176,160}, {145,156}, {265,302}, {81,224}, {38,49}, {191,241}, {35,158}, {264,144}, {123,255}, {195,53}, {243,262}, {18,32}, {243,245}, {113,30}, {67,243}, {188,125}, {286,103}, {265,28}, {235,161}, {301,148}, {179,235}, {111,69}, {110,274}, {78,26}, {260,142}, {18,139}, {33,175}, {253,233}, {231,244}, {220,119}, {269,196}, {2,147}, {209,233}, {128,274}, {79,241}, {282,54}, {45,288}, {128,107}, {47,115}, {166,236}, {66,157}, {166,203}, {169,75}, {48,263}, {190,161}, {121,30}, {71,237}, {239,163}, {24,81}, {112,272}, {23,94}, {11,103},{44,80}, {101,270}, {286,94}, {173,261}, {225,241}, {14,21}, {77,117}, {259,205}, {127,172}, {299,208}, {44,191}, {171,20}, {34,37}, {59,302}, {58,252}, {115,182}, {215,120}, {33,26}, {71,295}, {234,226}, {162,130}, {51,128}, {45,68}, {4,6}, {258,172}, {212,171}, {245,214}, {63,250}, {210,282}, {289,240}, {140,42}, {211,230}, {247,84}, {3,263}, {144,21}, {205,260}, {30,86},{192,230}, {114,213}, {122,70}, {16,252}, {77,93}, {268,164}, {151,87}, {113,214}, {194,41}, {242,79}, {221,68}, {136,293}, {144,76}, {12,63}, {232,113}, {27,240}, {91,138}, {275,167}, {232,62}, {235,76}, {256,279}, {123,146}, {238,164}, {105,18}, {297,246}, {134,181}, {3,294}, {179,8}, {157,32}, {288,236}, {35,181}, {177,230}, {123,48}, {85,218}, {201,153}, {66,28}, {139,285}, {125,10}, {114,263}, {137,214}, {298,300}, {94,85}, {58,291}, {166,87}, {242,24}, {298,19}, {114,152}, {302,108}, {202,291}, {80,261}, {149,184}, {21,120}, {176,127}, {168,97}, {139,175}, {88,90}, {289,15}, {7,197}, {267,50}, {267,37}, {99,129}, {206,142}, {100,289}, {23,159},{199,268}, {201,92}, {242,266}, {178,250}, {157,108}, {72,186}, {84,282}, {180,32}, {61,215}, {204,270}, {159,295}, {187,12}, {170,197}, {78,222}, {202,43}, {231,254}, {254,255}, {67,101}, {89,136}, {5,194}, {59,16}, {278,175},{140,64}, {39,140}, {118,174}, {4,51}, {135,148}, {135,160}, {39,65}, {300,136},{253,295}, {277,290}, {143,267}, {34,185}, {124,212}, {47,163}, {15,149}, {116,238}, {108,285}, {193,196}, {25,52}, {22,19}, {31,251}, {112,60}, {259,150}, {287,148}, {137,217}, {8,206}, {80,127}, {154,257}, {5,62}, {102,158}, {255,258}, {64,208}, {2,182}, {5,193}, {147,301}, {220,89}, {155,197}, {165,105}, {266,290}, {221,152}, {298,119}, {14,192}, {69,237}, {223,272}, {40,251}, {227,8}, {73,238}, {245,170}, {212,59}, {167,31}, {218,10},{222,17}, {132,53}, {55,223}, {185,219}, {156,40}, {250,294}, {38,83}, {109,164}, {75,86}, {20,43}, {156,65}, {70,281}, {57,280}, {55,1}, {39,52}, {177,107}}";
	char line[50000];
	while (fgets(line, sizeof(line)-1, stdin)) printf("%f\n", benchmark(line, 0));
	return 0;
}
